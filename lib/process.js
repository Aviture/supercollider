var fs     = require('fs');
var hljs   = require('highlight.js');
var marked = require('marked');
var path   = require('path');

// Combines the data from multiple parsing trees into one object.
// data: an array containing data from different parsers, generated by the async library. Each item in the array is an object containing the output of a single parser.
module.exports = function(data) {
  var hologram = data.hologram[0];
  var sassdoc  = data.sassdoc;
  var jsdoc    = data.jsdoc;
  // var cssobj   = data[3];
  var tree = {};

  // Process Hologram components
  // The Hologram parser forms the "canonical" list of components
  for (var item in hologram) {
    var comp = hologram[item];
    var componentName = comp['blocks'][0]['name'];
    var html = marked(comp['md'], {
      highlight: function(code, lang) {
        return hljs.highlight(lang, code).value;
      }
    });

    tree[componentName] = {
      'html': html,
      'variable': [],
      'mixin': [],
      'function': [],
      'javascript': []
    }
  }

  // Process SassDoc components
  // The @group tag is used to connect items to the main object
  for (var item in sassdoc) {
    var comp   = sassdoc[item];
    var group  = comp['group'][0];
    var type   = comp['context']['type'];

    // Only parse public items
    if (comp['access'] === 'private') continue;

    // Check if the item was assigned to a group
    if (group !== 'undefined') {
      // Check if the group is also an HTML component name
      if (typeof tree[group] === 'object') {
        // Type will be "function", "mixin", or "variable"
        tree[group][type].push(comp);
      }
      else {
        console.warn("Found a Sass component missing HTML documentation: " + group);
      }
    }
    else {
      console.warn("Found a Sass component missing a group: " + comp['context']['name']);
    }
  }

  // Process JSDoc components
  // The @component tag is used to connect items to the main object
  for (var item in jsdoc) {
    var comp = jsdoc[item];

    // Find the component name
    var group = (function() {
      for (var tag in comp['tags']) {
        if (comp['tags'][tag]['title'] === 'component') return comp['tags'][tag]['value'];
      }
      return null;
    })();

    // If the doclet doesn't have a group name
    if (group === null) {
      console.warn("Found a JavaScript doclet missing a component name: " + comp['kind'] + " " + comp['name']);
    }
    else {
      // If the component group doesn't exist
      if (typeof tree[group] !== 'object') {
        console.warn("Found a JavaScript component missing HTML documentation: " + group);
      }
      else {
        tree[group]['javascript'].push(comp);
      }
    }
  }

  if (typeof this.options.destJSON === 'string') {
    var outputPath = path.join(process.cwd(), this.options.destJSON, name+'.html');
    fs.writeFile(outputPath, JSON.stringify(tree));
  }

  return tree;
}