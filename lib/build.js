var fs         = require('fs');
var handlebars = require('./handlebars');
var path       = require('path');
var rimraf     = require('rimraf');

// Creates HTML pages out of an object of components, and writes them to disk.
// tree: an object of components generated by Super.process().
module.exports = function(tree) {
  // Fetch template code
  var layoutSrc = fs.readFileSync(path.join(this.options.templates, 'layout.html'));
  var componentSrc = fs.readFileSync(path.join(this.options.templates, 'component.html'));

  // Compile it into Handlebars templates
  var layoutTemplate = handlebars.compile(layoutSrc.toString(), {noEscape: true});
  var componentTemplate = handlebars.compile(componentSrc.toString(), {noEscape: true});

  // Erase an existing build folder and recreate it
  if (fs.existsSync(this.options.dest)) {
    rimraf.sync(this.options.dest)
  }
  fs.mkdirSync(this.options.dest);

  var components = Object.keys(tree);

  // For each component in the list, render a template with that component's data and write it to disk
  for (var name in tree) {
    var data = tree[name];

    // Compile the page
    var componentPage = componentTemplate(data);
    var layoutPage    = layoutTemplate({body: componentPage, components: components});

    // Write to disk
    var outputPath = path.join(process.cwd(), this.options.dest, name+'.html');
    fs.writeFileSync(outputPath, layoutPage);
  }
}